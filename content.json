{"meta":{"title":"Hello Eric’world!!","subtitle":"杨理清的技术博客","description":null,"author":"Eric Yang","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2016-05-14T06:35:37.294Z","updated":"2016-05-10T05:51:56.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","keywords":null,"text":"大家好，我是XXX。欢迎来到我的个人技术博客。 这里用markdown写下你的简介，就跟平时写md一样就可以了。","raw":null,"content":null},{"title":"读书","date":"2016-05-14T06:35:37.294Z","updated":"2016-05-10T05:51:56.000Z","comments":true,"path":"reading/index.html","permalink":"http://yoursite.com/reading/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null}],"posts":[{"title":"Android点击事件处理","slug":"点击事件处理","date":"2016-05-12T16:00:00.000Z","updated":"2016-05-13T02:14:46.000Z","comments":true,"path":"2016/05/13/点击事件处理/","link":"","permalink":"http://yoursite.com/2016/05/13/点击事件处理/","excerpt":"该文章是我在极客学院Wiki学习时整理所得.","keywords":null,"text":"该文章是我在极客学院Wiki学习时整理所得. 安卓系统点击事件处理 用户的点击事件均被包装为MotionEvent MotionEvent描述了用户的行为 ACTION_DOWN ACTION_UP ACTION_MOVE ACTION_POINTER_DOWN ACTION_POINTER_UP ACTION_CANCEL 使用MotionEventCompat.getActionMasker(ev)获取MotionEvent对应的action MotionEvent还包括以下信息 点击的位置(x,y坐标) 触点的数量(手指) 事件发生的时间戳 任何一个手势,都是以ACTION_DOWN起始,ACTION_UP结束 事件从Activity的dispatchTouchEvent()函数开始,沿着View层次树依次向下传递 父元素把事件dispatch到子元素 事件能在任意阶段被intercept 事件会沿着View的层次树依次向下传递,然后有反向向上传递,知道被”消费” View如果对手势感兴趣,就必须消费掉ACTION_DOWN的事件 出于性能的考虑,同一手势的后续事件将不会按照完整的路径进行传递,而是直接传递到消费了ACTION_DOWN事件的View 如果所有的View(ViewGroup)都没有消费掉事件,那它将传递到Activity的onTouchEvent()函数中,并结束传递过程,即如果没有被消费,也不会在继续传递了 可选的OnTouchListener能在任一View(ViewGroup)上intercept事件,事件被intercept之后,后面的调用将被传入ACTION_CANCEL?啥意思?? Activity.dispatchTouchEvent() 总是首先被调用 Sends event to root view attached to Window 如果所有的View(ViewGroup)都没有消费该事件,那么Activity.onTouchEvent()将被调用,而且这个函数是最后一个被调用的函数 ViewGroup.dispatchTouchEvent() 首先调用onInterceptTouchEvent()函数,判断是否需要拦截 检查是否应该替代自View的处理 Passes ACTION_CANCEL to active child 如果要消费掉同一手势的所有后续事件,需要返回true 对所有的孩子,以添加顺序的逆序进行遍历 如果点击在孩子的边界内,则调用child.dispatchTouchEvent() 如果没有被当前的孩子消费,则传递到下一个孩子 如果所有的孩子都未消费该事件,则传递给listener,OnTouchListener.onTouch() 如果没有listener,或者listener也未消费,则自己处理,调用ViewGroup.onTouchEvent() Intercepted events jump over child step View.dispatchTouchEvent() 如果被设置了OnTouchListener,那么将先把事件发送到listener,调用View.OnTouchListener.onTouch() 如果listener没有消费事件,将调用View.onTouchEvent(),即自己处理点击事件 小结 手势以ACTION_DOWN起始,以ACTION_UP结束 ACTION_DOWN,在每一层View上都会调用dispatchTouchEvent(),该View会判断是否对接下来的手势感兴趣,后续的点击事件将直接传递到感兴趣的View ViewGroup可以intercept一个手势,因为onInterceptTouchEvent()是在dispatchTouchEvent()函数中最先被调用的,如果onInterceptTouchEvent()返回true,它的孩子将不会收到该手势的后续事件 自定义点击事件处理 途径 (View/ViewGroup子类,Target)重载onTouchEvent()函数 为Target设置OnTouchListener 消费事件(onTouchEvent()) ACTION_DOWN:如果对手势感兴趣,那么ACTION_DOWN的event就要返回true,即便对于ACTION_DOWN不感兴趣 后续的事件,同样返回true,结束事件的处理流程(不会再传递给其他view或者parent view) ViewConfiguration的一些有用方法: getScaledTouchSlop():判断一个移动距离是否为drag getScaledMinimumFlingVelocity():判断一个拖拽速度是否为fling getLongPressTimeOut():判断一个touch时间段是否为long press 传递点击事件:调用target的dispatchTouchEvent(),不要直接调用target的onTouchEvent() ViewGroup拦截点击事件 重载onInterceptTouchEvent() 如果对当前的手势感兴趣,onInterceptTouchEvent()返回true,之后的点击事件将不再经过onInterceptTouchEvent()函数 其他的target(之前消费事件的View/ViewGroup)将收到ACTION_CANCEL 一些建议/警告 尽量调用super的对应方法,父类中已经做了很多基础工作了 ACTION_MOVE的处理中,检查移动距离是否超过slop(getScaledTouchSlop()) 处理ACTION_CANCEL事件,父View可能会拦截事件,ACTION_CANCEL后需要重置状态,且之后该手势将不会再收到任何事件 intercept之后,该手势之后的所有事件都将被拦截,所以不要轻易拦截 多触点事件响应 MotionEvent.getPointerCount()：获取当前屏幕上的触点数量 ACTION_POINTER_DOWN，ACTION_POINTER_UP用来响应次触点的事件,MotionEvent.getActionMasked(),MotionEvent.getActionIndex() MotionEvent的有些方法会有两个版本，带index参数的，用于获取第index个触点的数据；不带参数的，获取主触点（第一个触点）的数据 批量处理 出于效率的考虑,ACTION_MOVE可以被打包到一个MotionEvent进行处理 最近一次(本次)事件的信息,通过标准的方法获取:getX(),getY(),getEventTime() 本次和最早一次ACTION_MOVE的信息,通过相应historical的方法获取 getHistorySize()获取打包的数量 getHistorical*(pos)获取第一个触点的第pos个历史事件的信息 getHistorical*(index,pos)获取第index个触点的第pos个历史事件的信息 Can reconstruct all events as they occurred in time for maximum precision System Touch Handlers 不要首先就考虑使用自定义的事件处理方式 OnClickListener OnLongClickListener OnTouchListener 监听每一个MotionEvent,而不需要编写子类 可以在Listener中消费事件 view的onTouchEvent处理中,优先调用的是listener的处理函数 OnScrollListener / View.onScrollChanged() GestureDetector onDown(),onSingleTapUP(),onDoubleTap() onLongPress() onScroll()(缓慢滚动) onFLing()(快速滚动后释放手机) ScaleGestureDetector onScaleBegin(),onScale(),OnScaleEnd() 一个拓展的gesture detector库:android-gesture-detectors 通过OnTouchListener或者onTouchEvent()进行处理 缺点 Consume UP events and exposes no interface for CANCEL events May require added touch handling if these cases need special handling (e.g. reset a View’s appearance) Touch Delegate Specialized object to assist in forwarding touches from a parent view to its child Allows for the touch area of a specific view to be different than its actual bounds Called in onTouchEvent() of attached View（Events have to make it that far without being consumed by a child or listener） TouchDelegate is designed to be set on the PARENT and passed the CHILD view that touches should be forwarded to 1234ViewGroup parent;View child;Rect touchArea;parent.setTouchDelegate(new TouchDelegate(touchArea, child)); ViewDragHelper快速处理view拖拽的辅助类. 创建ViewDragHelper: mDragHelper = ViewDragHelper.create(this, 1.0f, new DragHelperCallback()); 把ViewGroup的点击事件传递给ViewDragHelper: 123456789101112@Overridepublic boolean onInterceptTouchEvent(MotionEvent event) &#123; if (mDragHelper.shouldInterceptTouchEvent(event)) &#123; return true; &#125; return super.onInterceptTouchEvent(event);&#125;@Overridepublic boolean onTouchEvent(MotionEvent event) &#123; mDragHelper.processTouchEvent(event); return true;&#125; ViewDragHelper.Callback的实现类DragHelperCallback中，重载感兴趣的函数，实现自己的逻辑 有一个用于边缘拖拽结束activity的库，边缘拖拽使用的就是ViewDragHelper：Slidr","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"Android","slug":"技术/Android","permalink":"http://yoursite.com/categories/技术/Android/"}],"tags":[{"name":"点击事件","slug":"点击事件","permalink":"http://yoursite.com/tags/点击事件/"},{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"评论功能数据库设计和开发","slug":"评论功能数据库设计","date":"2016-05-11T16:00:00.000Z","updated":"2016-05-12T06:34:20.000Z","comments":true,"path":"2016/05/12/评论功能数据库设计/","link":"","permalink":"http://yoursite.com/2016/05/12/评论功能数据库设计/","excerpt":"评论功能数据库设计和开发本文是作者在评论功能设计方面在数据库上的一些总结。","keywords":null,"text":"评论功能数据库设计和开发本文是作者在评论功能设计方面在数据库上的一些总结。 需求分析 一问一答:网易新闻(app) 评论为主:新浪新闻(分为评论和回复) 同级显示 数据库设计由于我一直使用 mysql,我就以 mysql为例谈一下针对上面三种场景的设计 一问一答: 这种场景下一般评论数量较少,评论不为活跃,可以不区分评论和回复,而同意看成评论.区别在于有的评论是直接评论 主题(每个评论都挂在某个主题下,如文章帖子等),而有些评论是 @ 其他用户的,为了能cover这两种场景,使用一张表就可以达到效果,评论表如下设计: 表字段 字段说明 id 主键 topic_id 主题ID topic_type 主题type content 评论内容 from_uid 评论用户id to_uid 评论目标用户id 为了能复用评论模块,我们引入了一个topic_type字段来却分主题的类别。from_uid表示评论人的id，通过该id我们可以检索到评论人的相关信息。to_uid是评论目标人的id，如果没有目标人，则该字段为空。 出于性能的考虑，往往我们会冗余评论人的相关信息到评论表中，比如评论人的nick、头像等，目标用户也是如此。这样一来我们就只用查询单表就可以达到显示的效果。 有时，目标用户有多个，那么可以将to_uid字段修改为to_uids，保存时用分隔符来分隔用户id，而目标用户的信息再去查询缓存或者数据库。也可以简单的将多个目标用户的信息一起存成json格式，可以应付简单的展现需求。 评论为主: 在以评论为主的树形显示的情况下,数据库的设计十分灵活,可以使用单表,添加一个parent_id字段来指向父评论.如果数据库本身支持嵌套查询,那么还是比较方便的,SqlServer、Oracle都支持，但是mysql不支持，那么只能通过存储过程来实现。在互联网应用中，能不使用触发器存储过程的话，尽量不要去使用，因为其对性能有影响。 我们还可以将评论拆分为评论表和回复表，评论挂在各种主题下面，而回复都挂在评论下面。 评论表的设计如下： 表字段 字段说明 id 主键 topic_id 主题ID topic_type 主题type content 评论内容 from_uid 评论用户id 回复表的设计如下： 表字段 字段说明 id 主键 comment_id 评论ID reply_id 回复目标id reply_type 回复类型 content 回复内容 from_uid 回复用户id to_uid 目标用户id 由于我们拆分了评论和回复，那么评论表就不再需要目标用户字段了，因为评论均是用户对主题的评论，评论表的设计更加简洁了。 回复表我添加了一个comment_id字段来表示该回复挂在的根评论id，这样设计也是出于性能方面的考虑，我们可以直接通过评论id一次性的捞出该评论下的所有回复，然后通过程序来编排回复的显示结构。通过适当的冗余来提高性能也是常用的优化手段之一。这里给出一段我通过评论id来查找并组织所有回复的代码： 1234567891011121314151617181920212223242526272829303132333435public List&lt;ReplyDTO&gt; getReplyListByRid(long rid)&#123; List&lt;ReplyDO&gt; replyDOList = replyDAO.queryReplyByCid(rid); if(replyDOList == null || replyDOList.size() == 0)&#123; return new ArrayList&lt;&gt;(); &#125; List&lt;ReplyDTO&gt; ReplyDTOList = new ArrayList&lt;&gt;(); List&lt;ReplyDTO&gt; parentList = new ArrayList&lt;&gt;(); for(ReplyDO replyDO:replyDOList)&#123; ReplyDTO replyDTO = convertReplyToDTO(replyDO); if(replyDTO.getReplyType == ReplyType.COMMENT)&#123; replyDTOList.add(replyDTO); parentList.add(replyDTO); &#125;else&#123; boolean foundParent = false; if(replyDTOList.size()&gt;0)&#123; for(ReplyDTO parent:parentList)&#123; if(parent.getId().equals(replyDTO.getReplyId()))&#123; if(parent.getNext() == null)&#123; parent.setNext(new ArrayList&lt;ReplyDTO&gt;()); &#125; parent.getNext().add(replyDTO); parentList.add(replyDTO); foundParent = true; break; &#125; &#125; &#125; if(!foundParent)&#123; throw new RuntimeException(&quot;sort reply error,should not go here&quot;); &#125; &#125; &#125; return replyDTOList;&#125; reply_type表示回复的类型,因为回复可以是针对评论的回复(comment),也可以是针对回复的回复(reply),通过这个字段来区分两种情景. reply_id是表示回复目标的id,如果reply_type是comment的话,那么reply_id=comment_id,如果reply_type是reply的话,这表示这条回复的父回复. 在数据结构的设计上,我在replyDTO中设计了一个List next属性,这样在形成了一个树形的结构,类似如下结构. 客户端可以直接根据该结构来进行树形结构的显示. 同级显示: 要达到网易新闻中评论的效果我还没有特别好的建议.这种场景中评论和回复是同级显示的,回复不在显示结构上不用挂在一个评论下面.双表的设计在这里就不太合适了,因为涉及到评论和回复的混排,使用双表则会导致查询的逻辑过于复杂.所以建议还是采用单表的实际,不区分评论和回复会简化应用层的逻辑.我们同意都看成评论,而有些评论是可以引用其他评论的.本人推荐采用闭包表的设计,例如: comment表设计: 表字段 字段说明 id 主键 topic_id 主题ID topic_type 主题type content 评论内容 from_uid 评论用户id parent_children表: 表字段 字段说明 id 主键 parent_id 父ID child_id 子id comment表保存所有评论内容,而parent_children表则记录评论表中各个评论的父子关系. 查询时往往会按照时间排序,我们可以直接按照id或者创建事件降序排列查询comment表即可.如果用户想查询一条评论的完整引用,则可以通过parent_children来找打对应的路径.向上查找到评论只需要可执行: select parent_id from parent_children where child_id=${id} and parent_id != ${id} 向下查找所有的子孙评论可执行: select child_id from parent_children where parent_id = ${id} and parent_id != ${id} 闭包表在查询时非常方便,但是插入的性能稍差,因为除了插入评论表以外,还需要把该条评论所有的父子关系插入到父子关系表中.插入性能会随着评论层级的加深而线性下降. 海量数据优化如果你的系统每天都会有成千上万条评论,那么单表的设计肯定是不行,优化的方式也有很多. 分库分表. 分库分表是最为常用也最有效的优化方式,建议按照主题来分库分表.这样同一个主题下面的评论就会落到同一张表里,避免了跨表查询. 适当的数据冗余. 如果你需要显示评论人的相关信息,那么在插入评论时就把这些信息写入评论表中,避免多次查询.实际上,如果是记录数据,都可以冗余对应的数据信息,因为它们的数据的实时行和一致性要求并不高,用户不会因为评论中的头像没更新而撕了你,哈哈. 附加幂等数据只允许单项操作.如果pd要求你能给评论点赞,那么你可以告诉它只能点赞,不能取消.因为从幂等性的要求来说,每个赞都是一条记录.评论的赞数如果都从点赞表中统计得出,那么性能开销会十分巨大,而且点赞如此轻量级的一个操作一定会加剧点赞表的竞争操作.所以建议直接在评论表中添加一个like_count的计数器,该字段只增不减. 热门评论加缓存.类似于网易新闻的热门评论,读取频度非常高,可以专门开接口给客户端,同时该接口做缓存. ####参考文献: 逻辑数据库设计-单纯的树(递归关系数据) 在数据库中存储层级结构 What are the Options for Storing Hierarchical Data in a Relational Database","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"数据库","slug":"技术/数据库","permalink":"http://yoursite.com/categories/技术/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"设计","slug":"设计","permalink":"http://yoursite.com/tags/设计/"}]},{"title":"android studio快捷键","slug":"AS快捷键","date":"2016-05-09T16:00:00.000Z","updated":"2016-05-10T07:56:54.000Z","comments":true,"path":"2016/05/10/AS快捷键/","link":"","permalink":"http://yoursite.com/2016/05/10/AS快捷键/","excerpt":"","keywords":null,"text":"AS快捷键 ctrl+D 复制粘贴 ctrl+space 提示 ctrl+shift+enter 自动匹配相对应的语法结构 ctrl+F 搜索 ctrl+句点 选中第一个item","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"工具","slug":"技术/工具","permalink":"http://yoursite.com/categories/技术/工具/"},{"name":"IDE","slug":"技术/工具/IDE","permalink":"http://yoursite.com/categories/技术/工具/IDE/"}],"tags":[{"name":"Android Studio","slug":"Android-Studio","permalink":"http://yoursite.com/tags/Android-Studio/"},{"name":"快捷键","slug":"快捷键","permalink":"http://yoursite.com/tags/快捷键/"}]},{"title":"Markdown语法","slug":"MD语法","date":"2016-05-09T16:00:00.000Z","updated":"2016-05-10T07:57:38.000Z","comments":true,"path":"2016/05/10/MD语法/","link":"","permalink":"http://yoursite.com/2016/05/10/MD语法/","excerpt":"","keywords":null,"text":"MarkDown语法 引用: 只需要在文本钱加入&gt;这种尖括号(大于号)即可 例如这样 要注意符号和文本间的空格. 图片与链接: 插入链接与插入图片的语法很像,区别在一个!号 图片为: ![](){ImgCap}{/ImgCap} 链接为: []() 插入图片的地址需要图床. 粗体与斜体: markdown的粗体和斜体也非常简单,用两个包含一段文本就是粗体的语法,用一个包含一段文本就是斜体的语法. 例如:这里是粗体 这里是斜体 代码框: 如果你是个程序猿,需要在文章里优雅的引用代码框那也很简单,只需要用两个`把中间代码包裹起来就好了. 代码块的话要用三个`包裹. 1234//helloworld.java public static void main(arg[])&#123; system.out.println(&quot;hello world!&quot;);&#125; 表格: 表格是我觉得markdown比较麻烦的地方,例子如下: 12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 这种语法生成的表格如下: | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 |","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"工具","slug":"技术/工具","permalink":"http://yoursite.com/categories/技术/工具/"},{"name":"IDE","slug":"技术/工具/IDE","permalink":"http://yoursite.com/categories/技术/工具/IDE/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"}]},{"title":"MVP架构","slug":"MVP框架","date":"2016-05-09T16:00:00.000Z","updated":"2016-05-10T10:48:24.000Z","comments":true,"path":"2016/05/10/MVP框架/","link":"","permalink":"http://yoursite.com/2016/05/10/MVP框架/","excerpt":"什么是MVP？MVP代表Model，view和Presenter。 view层负责处理用户事件和视图部分的展示。在android中，他可能是Activity或者Fragment类。Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。Presenter层是连接（或适配）view和model的桥梁。","keywords":null,"text":"什么是MVP？MVP代表Model，view和Presenter。 view层负责处理用户事件和视图部分的展示。在android中，他可能是Activity或者Fragment类。Model层负责访问数据。数据可以是远端的Server API，本地数据库或者SharedPreference等。Presenter层是连接（或适配）view和model的桥梁。下图是基于MVP架构的模式之一。view是UI线程。Presenter是view与model之间的适配器。UseCase或者Domain在Model层中，负责从实体获取或载入数据。依赖规则如下： 关键是，高层接口不知道底层接口的细节，或者更准确地说，高层接口不能，不应该，并且必须不了解底层接口的细节，是（面向）抽象的，并且是细节隐藏的。 依赖规则？Uncle Bob 的“the Clean Architecture”描述了依赖的规则是什么。 同心圆将软件划分为不同的区域，一般的，随着层级的深入，软件的等级也就越高。外圆是实现机制，内圆是核心策略。 这是上面文章的摘要： Entities： 可以是一个持有方法函数的对象 可以是一组数据结构或方法函数 它并不重要，能在项目中被不同应用程序使用即可 Use Cases： 包含特定于应用程序的业务规则 精心编排流入Entity或从Entity流出的数据 指挥Entity直接使用项目范围内的业务规则，从而实现Use Case的目标 Presenter，Controllers： 将Use Case和Entity中的数据转换成格式最方便的数据 外部系统，如数据库或网页能够方便的使用这些数据 完全包含GUI的MVC架构 External Interfaces，UI，DB 所有的细节所在 如数据库细节，Web框架细节，等等 MVC，MVP还是MVVM？那么哪一个才是最好的呢？哪一个比其他的更优秀呢？我能只选一个吗？ 答案是，NO。 这些模式的动机都是一样的。那就是如何避免复杂混乱的代码，让执行单元测试变得更容易，创造高质量应用程序。就这样。 当然，远不止这三种架构模式。而且任何一种模式都不可能是银弹，他们只是架构模式之一，不是解决问题的唯一途径。这些只是方法、手段而不是目的、目标。 利与弊OK，让我们回到MVP架构上。刚刚 我们了解了什么是MVP，讨论了MVP以及其他热门架构，并且介绍了MVC，MVP和MVVM三者间的不同。这是关于MVP架构利与弊的总结： 利： 可测试（TDD） 可维护（代码复用） 容易Reviewe 信息隐蔽 弊： 冗余的，尤其是小型App开发 （有可能）额外的学习曲线 开始编写代码之前需要时间成本（但是我敢打赌，设计架构是所有项目开发所必需的） show me the code！！！这里仅展示了MVP模式的一小段结构。如果你想了解更多项目或生动的代码示例，请参考文章末尾的“链接和资源”。那里有非常丰富和设计巧妙的示例，基本都托管在Github上，以便你能clone，在设备上运行，并了解工作原理。 首先，为每一个View定义接口。 12345678910111213141516171819/** *Interface classes for the Top view */public Interface TopView &#123; /** *Initialize the view. * *e.g. the facade-pattern mothod for handing all ActionBar settings */ void initViews(); /** * Open &#123;@link DatePickerDialog&#125; */ void openDatePickerDialog(); /** * Start ListActivity */ void startListActivity();&#125; 让我们重写TopView类，重点如下： TopActivty只是负责处理事件监听或者展示每个视图组件 所有的业务逻辑必须委托给Presenter类 在MVP中，View和Presenter是一一对应的（在MVVM中是一对多的） 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class TopActivty extends Activity implements TopView&#123; // here we use ButterKnife to inject views /** * Calendar Title */ @Bind(R.id.calendar_title) TextView mCalendarTitle; private TopPresenter mTopPresenter; @Override protected void onCreate(Bundle savedIntanceState)&#123; super.onCreate(savedIntanceState); setContentView(R.layout.activity_top); ButterKnife.bind(this); // Save TopPresenter instance in a member variable field mTopPresenter = new TopPresenter(); mTopPresenter.onCreate(this); &#125; /* * Overrides method from the &#123;@link TopView&#125; interfaces */ @Override public void initViews()&#123; //ActionBar settings //set event listeners &#125; @Override public void openDatePickerDialog()&#123; DatePickerFragment.newInstace().show(getSupportFragmentManager(),DatePickerFragment.TAG); //do not write logic here... all logic must be passed to the Presenter mTopPresenter.updateCalendarDate(); &#125; @Override public void startListActivity()&#123; startActivity(new Intent(this,ListActivity.class)); &#125;&#125; 这是Presenter类，最重要的一点是Presenter仅仅是连接View与Model的适配桥梁。比如， TopUseCase#saveCalendarDate() 是对TopPresenter细节隐藏的，同样对TopView也是如此。你不需要关心数据结构，也不需要关心业务逻辑是如何工作。因此你可以对TopUseCase执行单元测试，因为业务逻辑与视图层是分离的。1234567891011121314151617181920212223242526272829303132public class TopPresenter&#123; @Nullable private TopView mView; private TopUseCase mUseCase; public TopPresenter()&#123; mUseCase = new TopUseCase(); &#125; public void onCreate(@NonNull TopView TopView)&#123; mView = TopView; //here you call View&apos;s implemented methods mView.initViews(); &#125; public void updateCalendarDate()&#123; //do not forget to return if view instances is null if(mView == null)&#123; return; &#125; //here logic comes String dateToDisplay = mUseCase.getDateToDisplay(mContex.getResources()); mView.updateCalendarDate(dateToDisplay); //here you save date, and this logic is hiden in UseCase class mUseCase.saveCalendarDate(); &#125;&#125; 当然，尽管业务逻辑被实现在Activity类中，你依然可以执行单元测试，只不过这会耗费很多时间，而且有些复杂。可能需要更多的时间来运行App，相反，你本应该充分利用测试类库的性能，如Robolectric。 #### 总结 这里没有万能药，而且ＭＶＰ也仅仅是解决方案之一，他可以与其他方法协同使用，同样，也可以有选择的用于不同项目。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"移动开发","slug":"技术/移动开发","permalink":"http://yoursite.com/categories/技术/移动开发/"},{"name":"Android","slug":"技术/移动开发/Android","permalink":"http://yoursite.com/categories/技术/移动开发/Android/"}],"tags":[{"name":"架构","slug":"架构","permalink":"http://yoursite.com/tags/架构/"},{"name":"MVP","slug":"MVP","permalink":"http://yoursite.com/tags/MVP/"},{"name":"MVC","slug":"MVC","permalink":"http://yoursite.com/tags/MVC/"}]},{"title":"Hello Hexo‘s World！","slug":"hello-world","date":"2016-05-09T16:00:00.000Z","updated":"2016-05-10T08:23:12.000Z","comments":true,"path":"2016/05/10/hello-world/","link":"","permalink":"http://yoursite.com/2016/05/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","keywords":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"工具","slug":"技术/工具","permalink":"http://yoursite.com/categories/技术/工具/"},{"name":"Hexo","slug":"技术/工具/Hexo","permalink":"http://yoursite.com/categories/技术/工具/Hexo/"}],"tags":[{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"正则表达式","slug":"正则表达式","date":"2016-05-09T16:00:00.000Z","updated":"2016-05-10T08:24:32.000Z","comments":true,"path":"2016/05/10/正则表达式/","link":"","permalink":"http://yoursite.com/2016/05/10/正则表达式/","excerpt":"正则表达式-语法 限定符 限定符用来指定正则表达式中的一个给定组件必须要出现多少次才能满足匹配。有*或+或？或{n}或{n，}或{n，m}共6种。 ：匹配前面的子表达式零次或多次。等价于{0，}。 +：匹配前面的子表达式一次或多次。等价于{1，}。 ？：匹配前面的子表达式零次或一次。等价于{0,1}。 {n}：n是一个非负整数。匹配确定的n次。 {n，}：n是一个非负整数。至少匹配n次。 {n，m}：m和n均为非负整数，其中n&lt;=m。最好匹配n次且最多匹配m次。请注意在逗号和两个数之间不能有空格。","keywords":null,"text":"正则表达式-语法 限定符 限定符用来指定正则表达式中的一个给定组件必须要出现多少次才能满足匹配。有*或+或？或{n}或{n，}或{n，m}共6种。 ：匹配前面的子表达式零次或多次。等价于{0，}。 +：匹配前面的子表达式一次或多次。等价于{1，}。 ？：匹配前面的子表达式零次或一次。等价于{0,1}。 {n}：n是一个非负整数。匹配确定的n次。 {n，}：n是一个非负整数。至少匹配n次。 {n，m}：m和n均为非负整数，其中n&lt;=m。最好匹配n次且最多匹配m次。请注意在逗号和两个数之间不能有空格。 限定符出现在范围表达式之后。因此，它应用于整个范围表达式。* 、+和？限定符都是贪婪的，因为他们毁尽可能多的匹配文字，只有在他们的后面加上一个？就可以实现非贪婪或最小匹配。 定位符 定位符使您能够将正则表达式固定到行首或行尾。他们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。 定位符用来描述字符串或单词的边界，^和$分别指字符串的开始与结束，\\b描述单词的前或后边界，\\B表示非单词边界。 正则表达式的限定符有： ^：匹配输入字符串开始的位置。如果设置了RegExp对象的Multiline属性，^还会与\\n或\\r之后的位置匹配。 $：匹配输入字符串结尾的位置。如果设置了RegExp对象的Multiline属性，$还会与\\n或\\r之后的位置匹配。 \\b：匹配一个字边界，即字与空格件的位置。 \\B：非字边界匹配。 注意：不能将限定符与定点符一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如^* 之类的表达式。 选择 用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但是圆括号会有一个副作用，是相关的匹配会被缓存，此时用？：放在第一个选项前来消除这种副作用。 其中？：是非捕获元之一，还有两个非捕获元是？=和？！，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。 反向引用 对于一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个自匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从1开始，最多可存储99个捕获的子表达式。每个缓冲区都可以使用‘\\n’访问，其中n为一个标识特定缓冲区的一位或两位十进制数。 可以使用非捕获元字符 ‘？：’、‘？=’或‘？！’来重写捕获，忽略对相关匹配的保存。 反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。 正则表达式-元字符 下表包含了元字符的完整列表以及他们在正则表达式上下文中的行为： \\:将下一个字符标记为一个特殊字符、或将一个原义字符、或一个后向引用、或一个八进制转义符。例如，‘n’匹配字符“n”。‘\\n’匹配一个换行符。序列‘\\’匹配“\\”而“(”则匹配“（”。 .：匹配除“\\n”之外的任何单个字符。要匹配包括‘\\n’在内的任何字符，请使用像‘[.\\n]’的模式。 (pattern):匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用‘(’或‘)’。 (?:pattern):匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用”或”字符(|)来组合一个模式的各个部分是很有用。例如，‘industr(?:y|ies)’就是一个比‘industry|industries’更简略的表达式。 (?=pattern):正向预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95|98|NT|2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 (?!pattern):负向预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 x|y：匹配x或y。例如，‘z|food’能匹配“z”或“food”。‘(z|f)ood’则匹配“zood”或“food”。 [xyz]:字符集合。匹配所包含的任意一个字符。例如，’[abc]’可以匹配“plain”中的’a’。 [^xyz]:负值字符集合。匹配未包含的任意字符。例如，’[^abc]’可以匹配”plain”中的’p’、’l’、’i’、’n’。 [a-z]:字符范围。匹配制定范围内的任意字符。 [^a-z]:负值字符集合。匹配任何不在指定范围内的任意字符。 \\b:匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \\B:匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \\cx:匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的‘c’字符。 \\d:匹配一个数字字符。等价于[0-9]。 \\D:匹配一个非数字字符。等价于[^0-9]。 \\f:匹配一个换行符。等价于\\xOc和\\cL。 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 \\t 匹配一个制表符。等价于 \\x09 和 \\cI。 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 \\w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \\W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。 \\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。 \\n 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \\nm 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 \\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 正则表达式-运算符优先级 正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。 相同优先级的从左到右进行运算，不同优先级的运算先高后低。下面从最高到最低说明了各种正则表达式运算符的优先级顺序： \\: 转义符 (), (?:), (?=), []：圆括号和方括号 , +, ?, {n}, {n,}, {n,m}：限定符^, $, \\任何元字符、任何字符 定位点和序列（即：位置和顺序） |：替换，”或”操作字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。 正则表达式-匹配规则 基本模式匹配 一切从最基本的开始。模式，是正则表达式最基本的元素，他们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。 字符簇 在Internet的程序中，正则表达式通常用来验证用户的输入。当用户提交了一个Form以后，要判断输入的电话号码、地址、Email地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。所以要用一个中更自由的描述我们要的模式的方法，他就是字符簇。 匹配所有的数字，句号和减号 [0-9\\.\\-] 匹配所有的白字符 [ \\f\\r\\t\\n] PHP的正则表达式有一些内置的通用字符簇： [[:alpha:]] 任何字母 [[:digit:]] 任何数字 [[:alnum:]] 任何字母和数字 [[:space:]] 任何空白字符 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母 [[:punct:]] 任何标点符号 [[:xdigit:]] 任何16进制的数字，相当于[0-9a-fA-F] 确定重复出现 到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。 ^[a-zA-Z_]$ ——– 所有的字母和下划线 ^[[:alpha:]]{3}$ ——–所有的3个字母的单词 ^a$ ——– 字母a ^a{4}$ ——–aaaa ^a{2,4}$ ——– aa,aaa或aaaa ^a{1,3}$ ——–a,aa或aaa ^a{2,}$ ——– 包含多于两个a的字符串 ^a{2,} ——– 如：aardvark和aaab，但apple不行 a{2,} ——– 如：baad和aaa，但Nantucket不行 \\t{2} ——– 两个制表符 .{2} ——– 所有的两个字符","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"},{"name":"综合","slug":"技术/综合","permalink":"http://yoursite.com/categories/技术/综合/"},{"name":"正则表达式","slug":"技术/综合/正则表达式","permalink":"http://yoursite.com/categories/技术/综合/正则表达式/"}],"tags":[{"name":"语法","slug":"语法","permalink":"http://yoursite.com/tags/语法/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"}]}]}